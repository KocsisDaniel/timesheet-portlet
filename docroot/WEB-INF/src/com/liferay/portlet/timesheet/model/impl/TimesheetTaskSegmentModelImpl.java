/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portlet.timesheet.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import com.liferay.portlet.timesheet.model.TimesheetTaskSegment;
import com.liferay.portlet.timesheet.model.TimesheetTaskSegmentModel;
import com.liferay.portlet.timesheet.model.TimesheetTaskSegmentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TimesheetTaskSegment service. Represents a row in the &quot;TS_TimesheetTaskSegment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portlet.timesheet.model.TimesheetTaskSegmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TimesheetTaskSegmentImpl}.
 * </p>
 *
 * @author Mate Thurzo
 * @see TimesheetTaskSegmentImpl
 * @see com.liferay.portlet.timesheet.model.TimesheetTaskSegment
 * @see com.liferay.portlet.timesheet.model.TimesheetTaskSegmentModel
 * @generated
 */
@JSON(strict = true)
public class TimesheetTaskSegmentModelImpl extends BaseModelImpl<TimesheetTaskSegment>
	implements TimesheetTaskSegmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a timesheet task segment model instance should use the {@link com.liferay.portlet.timesheet.model.TimesheetTaskSegment} interface instead.
	 */
	public static final String TABLE_NAME = "TS_TimesheetTaskSegment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "segmentId", Types.BIGINT },
			{ "taskId", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "duration", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table TS_TimesheetTaskSegment (segmentId LONG not null primary key,taskId LONG,startDate DATE null,endDate DATE null,duration LONG)";
	public static final String TABLE_SQL_DROP = "drop table TS_TimesheetTaskSegment";
	public static final String ORDER_BY_JPQL = " ORDER BY timesheetTaskSegment.segmentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TS_TimesheetTaskSegment.segmentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.portlet.timesheet.model.TimesheetTaskSegment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.portlet.timesheet.model.TimesheetTaskSegment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TimesheetTaskSegment toModel(
		TimesheetTaskSegmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TimesheetTaskSegment model = new TimesheetTaskSegmentImpl();

		model.setSegmentId(soapModel.getSegmentId());
		model.setTaskId(soapModel.getTaskId());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setDuration(soapModel.getDuration());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TimesheetTaskSegment> toModels(
		TimesheetTaskSegmentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TimesheetTaskSegment> models = new ArrayList<TimesheetTaskSegment>(soapModels.length);

		for (TimesheetTaskSegmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.portlet.timesheet.model.TimesheetTaskSegment"));

	public TimesheetTaskSegmentModelImpl() {
	}

	public long getPrimaryKey() {
		return _segmentId;
	}

	public void setPrimaryKey(long primaryKey) {
		setSegmentId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_segmentId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TimesheetTaskSegment.class;
	}

	public String getModelClassName() {
		return TimesheetTaskSegment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("segmentId", getSegmentId());
		attributes.put("taskId", getTaskId());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("duration", getDuration());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long segmentId = (Long)attributes.get("segmentId");

		if (segmentId != null) {
			setSegmentId(segmentId);
		}

		Long taskId = (Long)attributes.get("taskId");

		if (taskId != null) {
			setTaskId(taskId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Long duration = (Long)attributes.get("duration");

		if (duration != null) {
			setDuration(duration);
		}
	}

	@JSON
	public long getSegmentId() {
		return _segmentId;
	}

	public void setSegmentId(long segmentId) {
		_segmentId = segmentId;
	}

	@JSON
	public long getTaskId() {
		return _taskId;
	}

	public void setTaskId(long taskId) {
		_taskId = taskId;
	}

	@JSON
	public Date getStartDate() {
		return _startDate;
	}

	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	public Date getEndDate() {
		return _endDate;
	}

	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	public long getDuration() {
		return _duration;
	}

	public void setDuration(long duration) {
		_duration = duration;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TimesheetTaskSegment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TimesheetTaskSegment toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TimesheetTaskSegment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		TimesheetTaskSegmentImpl timesheetTaskSegmentImpl = new TimesheetTaskSegmentImpl();

		timesheetTaskSegmentImpl.setSegmentId(getSegmentId());
		timesheetTaskSegmentImpl.setTaskId(getTaskId());
		timesheetTaskSegmentImpl.setStartDate(getStartDate());
		timesheetTaskSegmentImpl.setEndDate(getEndDate());
		timesheetTaskSegmentImpl.setDuration(getDuration());

		timesheetTaskSegmentImpl.resetOriginalValues();

		return timesheetTaskSegmentImpl;
	}

	public int compareTo(TimesheetTaskSegment timesheetTaskSegment) {
		int value = 0;

		if (getSegmentId() < timesheetTaskSegment.getSegmentId()) {
			value = -1;
		}
		else if (getSegmentId() > timesheetTaskSegment.getSegmentId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TimesheetTaskSegment timesheetTaskSegment = null;

		try {
			timesheetTaskSegment = (TimesheetTaskSegment)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = timesheetTaskSegment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TimesheetTaskSegment> toCacheModel() {
		TimesheetTaskSegmentCacheModel timesheetTaskSegmentCacheModel = new TimesheetTaskSegmentCacheModel();

		timesheetTaskSegmentCacheModel.segmentId = getSegmentId();

		timesheetTaskSegmentCacheModel.taskId = getTaskId();

		Date startDate = getStartDate();

		if (startDate != null) {
			timesheetTaskSegmentCacheModel.startDate = startDate.getTime();
		}
		else {
			timesheetTaskSegmentCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			timesheetTaskSegmentCacheModel.endDate = endDate.getTime();
		}
		else {
			timesheetTaskSegmentCacheModel.endDate = Long.MIN_VALUE;
		}

		timesheetTaskSegmentCacheModel.duration = getDuration();

		return timesheetTaskSegmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{segmentId=");
		sb.append(getSegmentId());
		sb.append(", taskId=");
		sb.append(getTaskId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", duration=");
		sb.append(getDuration());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portlet.timesheet.model.TimesheetTaskSegment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>segmentId</column-name><column-value><![CDATA[");
		sb.append(getSegmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskId</column-name><column-value><![CDATA[");
		sb.append(getTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>duration</column-name><column-value><![CDATA[");
		sb.append(getDuration());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TimesheetTaskSegment.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TimesheetTaskSegment.class
		};
	private long _segmentId;
	private long _taskId;
	private Date _startDate;
	private Date _endDate;
	private long _duration;
	private TimesheetTaskSegment _escapedModelProxy;
}